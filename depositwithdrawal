confirmButton.addActionListener(e -> {
    String selectedAccount = (String) accountDropdown.getSelectedItem();
    String input = amountField.getText().trim();

    if (input.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter an amount.");
        return;
    }

    try {
        double amount = Double.parseDouble(input);
        if (amount <= 0) {
            JOptionPane.showMessageDialog(this, "Amount must be greater than 0.");
            return;
        } else if (amount > 10000) {
            JOptionPane.showMessageDialog(this, "Cannot deposit more than 10,000.");
            return;
        }

        if (selectedAccount.equals("Checking")) {
            currentUser.setCheckingBalance(currentUser.getCheckingBalance() + amount);
        } else {
            currentUser.setSavingsBalance(currentUser.getSavingsBalance() + amount);
        }

        UserPage.saveUserBalances("src/user.csv");
        JOptionPane.showMessageDialog(this, "Deposit successful!");

        // ✅ Leave window open and allow more deposits

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Invalid number format.");
    }
});


//withdraw

confirmButton.addActionListener(e -> {
    String selectedAccount = (String) accountDropdown.getSelectedItem();
    String input = amountField.getText().trim();

    if (input.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter an amount.");
        return;
    }

    try {
        double amount = Double.parseDouble(input);
        if (amount <= 0) {
            JOptionPane.showMessageDialog(this, "Amount must be greater than 0.");
            return;
        }

        boolean success = false;
        if (selectedAccount.equals("Checking")) {
            if (currentUser.getCheckingBalance() >= amount) {
                currentUser.setCheckingBalance(currentUser.getCheckingBalance() - amount);
                success = true;
            }
        } else {
            if (currentUser.getSavingsBalance() >= amount) {
                currentUser.setSavingsBalance(currentUser.getSavingsBalance() - amount);
                success = true;
            }
        }

        if (success) {
            UserPage.saveUserBalances("src/user.csv");
            JOptionPane.showMessageDialog(this, "Withdrawal successful!");
            // ✅ Leave window open for more withdrawals
        } else {
            JOptionPane.showMessageDialog(this, "Insufficient funds.");
        }

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Invalid number format.");
    }
});
