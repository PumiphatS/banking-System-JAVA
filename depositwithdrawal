import javax.swing.*;

public class DepositPanel extends JFrame {
    private User currentUser;
    private JTextField amountField;
    private JComboBox<String> accountDropdown;
    private JLabel balanceLabel;

    public DepositPanel(User user) {
        this.currentUser = user;
        initComponents();
    }

    private void initComponents() {
        setTitle("Deposit Funds");
        setSize(350, 220);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        String[] accounts = {"Checking", "Savings"};
        accountDropdown = new JComboBox<>(accounts);
        amountField = new JTextField(10);
        balanceLabel = new JLabel();

        JButton confirmButton = new JButton("Confirm");
        JButton backButton = new JButton("Back");

        JPanel panel = new JPanel();
        panel.add(new JLabel("Select Account:"));
        panel.add(accountDropdown);
        panel.add(new JLabel("Deposit Amount:"));
        panel.add(amountField);
        panel.add(confirmButton);
        panel.add(backButton);
        panel.add(balanceLabel);

        updateBalanceLabel((String) accountDropdown.getSelectedItem());

        add(panel);

        // Update balance label when account selection changes
        accountDropdown.addActionListener(e -> {
            String selectedAccount = (String) accountDropdown.getSelectedItem();
            updateBalanceLabel(selectedAccount);
        });

        confirmButton.addActionListener(e -> {
            String selectedAccount = (String) accountDropdown.getSelectedItem();
            String input = amountField.getText().trim();

            if (input.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an amount.");
                return;
            }

            try {
                double amount = Double.parseDouble(input);
                if (amount <= 0) {
                    JOptionPane.showMessageDialog(this, "Amount must be greater than 0.");
                    return;
                } else if (amount > 10000) {
                    JOptionPane.showMessageDialog(this, "Cannot deposit more than 10,000.");
                    return;
                }

                if (selectedAccount.equals("Checking")) {
                    currentUser.setCheckingBalance(currentUser.getCheckingBalance() + amount);
                } else {
                    currentUser.setSavingsBalance(currentUser.getSavingsBalance() + amount);
                }

                UserPage.saveCurrentUser("src/user.csv");
                JOptionPane.showMessageDialog(this, "Deposit successful!");
                amountField.setText("");
                updateBalanceLabel(selectedAccount);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid number format.");
            }
        });

        backButton.addActionListener(e -> {
            dispose();
            UserPage.launchForUser(currentUser.getUsername());
        });
    }

    private void updateBalanceLabel(String accountType) {
        if (accountType.equals("Checking")) {
            balanceLabel.setText("Current Checking Balance: $" + String.format("%.2f", currentUser.getCheckingBalance()));
        } else {
            balanceLabel.setText("Current Savings Balance: $" + String.format("%.2f", currentUser.getSavingsBalance()));
        }
    }
}

//withdraw

import javax.swing.*;

public class WithdrawPanel extends JFrame {
    private User currentUser;
    private JTextField amountField;
    private JComboBox<String> accountDropdown;
    private JLabel balanceLabel;

    public WithdrawPanel(User user) {
        this.currentUser = user;
        initComponents();
    }

    private void initComponents() {
        setTitle("Withdraw Funds");
        setSize(350, 220);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        String[] accounts = {"Checking", "Savings"};
        accountDropdown = new JComboBox<>(accounts);
        amountField = new JTextField(10);
        balanceLabel = new JLabel();

        JButton confirmButton = new JButton("Confirm");
        JButton backButton = new JButton("Back");

        JPanel panel = new JPanel();
        panel.add(new JLabel("Select Account:"));
        panel.add(accountDropdown);
        panel.add(new JLabel("Withdraw Amount:"));
        panel.add(amountField);
        panel.add(confirmButton);
        panel.add(backButton);
        panel.add(balanceLabel);

        updateBalanceLabel((String) accountDropdown.getSelectedItem());

        add(panel);

        // Update balance label when account selection changes
        accountDropdown.addActionListener(e -> {
            String selectedAccount = (String) accountDropdown.getSelectedItem();
            updateBalanceLabel(selectedAccount);
        });

        confirmButton.addActionListener(e -> {
            String selectedAccount = (String) accountDropdown.getSelectedItem();
            String input = amountField.getText().trim();

            if (input.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter an amount.");
                return;
            }

            try {
                double amount = Double.parseDouble(input);
                if (amount <= 0) {
                    JOptionPane.showMessageDialog(this, "Amount must be greater than 0.");
                    return;
                } else if (amount > 10000) {
                    JOptionPane.showMessageDialog(this, "Cannot withdraw more than 10,000 at a time.");
                    return;
                }

                boolean success = false;

                if (selectedAccount.equals("Checking")) {
                    if (currentUser.getCheckingBalance() >= amount) {
                        currentUser.setCheckingBalance(currentUser.getCheckingBalance() - amount);
                        success = true;
                    }
                } else {
                    if (currentUser.getSavingsBalance() >= amount) {
                        currentUser.setSavingsBalance(currentUser.getSavingsBalance() - amount);
                        success = true;
                    }
                }

                if (success) {
                    UserPage.saveCurrentUser("src/user.csv");
                    JOptionPane.showMessageDialog(this, "Withdrawal successful!");
                    amountField.setText("");
                    updateBalanceLabel(selectedAccount);
                } else {
                    JOptionPane.showMessageDialog(this, "Insufficient funds.");
                }

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid number format.");
            }
        });

        backButton.addActionListener(e -> {
            dispose();
            UserPage.launchForUser(currentUser.getUsername());
        });
    }

    private void updateBalanceLabel(String accountType) {
        if (accountType.equals("Checking")) {
            balanceLabel.setText("Current Checking Balance: $" + String.format("%.2f", currentUser.getCheckingBalance()));
        } else {
            balanceLabel.setText("Current Savings Balance: $" + String.format("%.2f", currentUser.getSavingsBalance()));
        }
    }
}


